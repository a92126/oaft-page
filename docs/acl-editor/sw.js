const IDLE_BATCH=1,CACHE_LIB="2nd",IDLE_LIST=new Array(16).fill(0).map((e,c)=>`/r/agb.${c}.webp`),INIT_LIST=["/r/loadimg.svg","/r/gbadb.json"],LOCAL_RES=new Set([...INIT_LIST,...IDLE_LIST]),SITE_ORIG=new URL(location.href).origin,SITE_PACK="/r/agbpack.webp";let ready=!1;const addResourcesToCache=async e=>{await(await caches.open(CACHE_LIB)).addAll(e)},putInCache=async(e,c)=>{await(await caches.open(CACHE_LIB)).put(e,c)},scheduleIdle=e=>{e=e??0;const c=async r=>{await Promise.allSettled(r.map(async function(o){const s=`${SITE_ORIG}${o}`;if(await(await caches.open(CACHE_LIB)).match(s))return Promise.resolve();const a=await fetch(s);a.ok&&putInCache(s,a.clone())})),setTimeout(()=>scheduleIdle(e+1),ready?300:2e3)};e<IDLE_LIST.length?c(IDLE_LIST.slice(e,e+1)):addResourcesToCache(INIT_LIST)},schedulePack=async()=>{const e=`${SITE_ORIG}${IDLE_LIST[IDLE_LIST.length-1]}`;if(await(await caches.open(CACHE_LIB)).match(e))return"ok";const s=(await fetch(SITE_PACK)).body.getReader();let i=0,n=0,a,t;const p=({done:w,value:h})=>{if(w)return Promise.resolve();if(t){let l=new Uint8Array(t.length+h.length);l.set(t,0),l.set(h,t.length),t=l}else t=h;for(;4<t.length&&(n===0&&(n=t[0]|t[1]<<8|t[2]<<16,i=t[3]),!(n+4>t.length));){a=t.slice(4,n+4),t=t.slice(n+4),n=0;const l=new Response(new Blob([a],{type:"image/webp"}));putInCache(`${SITE_ORIG}${IDLE_LIST[i]}`,l)}return s.read().then(p)};return s.read().then(p)},tryCache=async({request:e,preloadResponse:c})=>{const{pathname:r}=new URL(e.url),o=`${SITE_ORIG}${r}`;if(e.method.toUpperCase()!=="GET"||!LOCAL_RES.has(r))return await fetch(e);const i=await(await caches.open(CACHE_LIB)).match(o);if(i)return i;let n=await c;if(n)return n.ok&&putInCache(o,n.clone()),n;try{const a=await fetch(o);return a.ok&&putInCache(o,a.clone()),a}catch{return new Response("Request Invalid Object",{status:404,headers:{"Content-Type":"text/plain"}})}};self.oninstall=()=>{setTimeout(schedulePack,500)},self.onactivated=e=>{ready=!0,e.waitUntil(self.registration.navigationPreload?self.registration.navigationPreload.enable():Promise.resolve())},self.onfetch=e=>{e.respondWith(tryCache(e))};
